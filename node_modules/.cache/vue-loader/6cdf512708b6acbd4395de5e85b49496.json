{"remainingRequest":"/home/shreya/django-container/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/shreya/django-container/src/views/Signup.vue?vue&type=template&id=024d905c&","dependencies":[{"path":"/home/shreya/django-container/src/views/Signup.vue","mtime":1589227651884},{"path":"/home/shreya/django-container/node_modules/cache-loader/dist/cjs.js","mtime":1588833914158},{"path":"/home/shreya/django-container/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1588833914790},{"path":"/home/shreya/django-container/node_modules/vuetify-loader/lib/loader.js","mtime":1588833914810},{"path":"/home/shreya/django-container/node_modules/cache-loader/dist/cjs.js","mtime":1588833914158},{"path":"/home/shreya/django-container/node_modules/vue-loader/lib/index.js","mtime":1588833914790}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}